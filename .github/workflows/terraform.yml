name: Plan and Apply Terraform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # We don't want to create any real cloud resources from this
  # repo. It is just for demonstrating guardrails evaluation on TF
  # plans. So use dummy credentials that would fail if we ever tried
  # to run `tf apply.
  AWS_ACCESS_KEY: "asdf"
  AWS_SECRET_KEY: "asdf"
  GOOGLE_OAUTH_ACCESS_TOKEN: "asdf"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        env: ["dev", "prod"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Ensure Modules File Exists
        run: |
          if [ -f .terraform/modules/modules.json ]; then
            echo "Modules file exists."
          else
            echo "Modules file not found. Creating an empty file."
            mkdir -p .terraform/modules
            echo "{}" > .terraform/modules/modules.json
          fi
        
      - name: Upload Terraform Modules File
        uses: actions/upload-artifact@v4
        with:
          name: modules-file-${{ matrix.env }}
          path: .terraform/modules/modules.json
          if-no-files-found: warn

      - name: Terraform Plan
        run: terraform plan -state=${{ matrix.env }}.tfstate -var-file=${{ matrix.env }}.tfvars -refresh=false -out=plan.raw

      - name: Convert the plan to JSON
        id: planToJson
        run: terraform show -json plan.raw

      - name: Save JSON to a file
        uses: fishcharlie/CmdToFile@v1.0.0
        with:
          data: ${{ steps.planToJson.outputs.stdout }}
          output: plan-${{ matrix.env }}.json

      - name: Upload Terraform Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: plan-file-${{ matrix.env }}
          path: plan-${{ matrix.env }}.json

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -state=${{ matrix.env }}.tfstate -var-file=dev.tfvars -input=false

  resourcely-ci:
    needs: terraform
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Terraform Plan Output
        uses: actions/download-artifact@v4
        with:
          name: plan-file-dev
          path: tf-plan-files/

      - name: Download Terraform Modules file
        uses: actions/download-artifact@v4
        with:
          name: modules-file-dev
          path: tf-plan-files/
          if-no-files-found: warn

      - name: Download Terraform Plan Output
        uses: actions/download-artifact@v4
        with:
          name: plan-file-prod
          path: tf-plan-files/

      - name: Save JSON to a file
        uses: fishcharlie/CmdToFile@v1.0.0
        with:
          data: |
            {
              "plans": [{
                "plan_file": "plan-dev.json",
                "config_root_path": ".",
                "environment": "dev"
              },{
                "plan_file": "plan-prod.json",
                "config_root_path": ".",
                "environment": "prod"
              }]
            }
          output: tf-plan-files/manifest.json

      - name: Resourcely CI
        uses: Resourcely-Inc/resourcely-action@main
        with:
          resourcely_api_token: ${{ secrets.RESOURCELY_API_TOKEN }}
          resourcely_api_host: "https://api.dev.resourcely.io"
          tf_plan_directory: "tf-plan-files"
          modules_file: "tf-plan-files/modules.json"
          docker_tag: "dev-latest"
        
